---
title: "DATA334 Final Project - Data Science Salaries"
author: "Brody Pinto"
format: 
  html:
    embed-resources: true
warning: false
---

```{r}
library(tidyverse)

theme_set(theme_minimal())

salary <- read.csv("data/v7_Latest_Data_Science_Salaries.csv", stringsAsFactors = TRUE) |>
  filter(!is.na(Salary.in.USD))

## Question: What happens in the case_when when there is a "Business Intelligence Analyst"?

salary |>
  mutate(Job.Category = case_when(str_detect(Job.Title, pattern = "AI ") == TRUE ~ "Artificial Intelligence",
                                  str_detect(Job.Title, pattern = "Autonomous") == TRUE ~ "Artificial Intelligence",
                                  str_detect(Job.Title, pattern = "Computer Vision") == TRUE ~ "Artificial Intelligence",
                                  str_detect(Job.Title, pattern = "Analy") == TRUE ~ "Data Analytics",
                                  str_detect(Job.Title, pattern = "BI ") == TRUE ~ "Business Intelligence",
                                  str_detect(Job.Title, pattern = "Business") == TRUE ~ "Business Intelligence",
                                  str_detect(Job.Title, pattern = "Data Product") == TRUE ~ "Business Intelligence",
                                  str_detect(Job.Title, pattern = "Data Sci") == TRUE ~ "Data Science",
                                  str_detect(Job.Title, pattern = "Data Lead") == TRUE ~ "Data Science",
                                  str_detect(Job.Title, pattern = "Data Manager") == TRUE ~ "Data Science",
                                  str_detect(Job.Title, pattern = "Data Specialist") == TRUE ~ "Data Science",
                                  str_detect(Job.Title, pattern = "ML ") == TRUE ~ "Machine Learning",
                                  str_detect(Job.Title, pattern = "Machine") == TRUE ~ "Machine Learning",
                                  str_detect(Job.Title, pattern = "Deep Learning") == TRUE ~ "Machine Learning",
                                  str_detect(Job.Title, pattern = "Big ") == TRUE ~ "Big Data",
                                  str_detect(Job.Title, pattern = "Cloud") == TRUE ~ "Cloud Data",
                                  str_detect(Job.Title, pattern = "Data Architect") == TRUE ~ "Data Organization",
                                  str_detect(Job.Title, pattern = "Data Engineer") == TRUE ~ "Data Organization",
                                  str_detect(Job.Title, pattern = "Data Developer") == TRUE ~ "Data Organization",
                                  str_detect(Job.Title, pattern = "Data Infrastructure") == TRUE ~ "Data Organization",
                                  str_detect(Job.Title, pattern = "ETL ") == TRUE ~ "Data Organization",
                                  str_detect(Job.Title, pattern = "Data Operations") == TRUE ~ "Data Operations",
                                  str_detect(Job.Title, pattern = "DevOps") == TRUE ~ "Data Operations",
                                  str_detect(Job.Title, pattern = "Data Integration") == TRUE ~ "Data Operations",
                                  str_detect(Job.Title, pattern = "Data Strateg") == TRUE ~ "Data Operations",
                                  str_detect(Job.Title, pattern = "Decision Scientist") == TRUE ~ "Data Operations",
                                  str_detect(Job.Title, pattern = "Data Model") == TRUE ~ "Data Modeling",
                                  str_detect(Job.Title, pattern = "Data Quality") == TRUE ~ "Data Quality",
                                  str_detect(Job.Title, pattern = "Data Vis") == TRUE ~ "Data Visualization",
                                  
                                  ))
```

## My goal for this final project is to create a shiny app that allows the user to visualize the data in as many different ways as possible!

To start, I'm going to want to include an option to do frequency plots and/or histograms for the salaries per `Job.Title`, per `Employment.Type`, per `Experience.Level`, per `Company.Location`, and per `Company.Size`. I will also include a reactive summary statistics table (mean, median, min, max, standard deviation, count).

I also want to allow the user to select any number of years (2020-2024) to be included.

If I have time, I may try to include a user option to try fitting logistic regression models (with up to 2 or 3 predictors) to the data.

```{r}
library(shiny)

job_vec <- unique(salary$Job.Title) |>
  fct_expand("All") |>
  levels()

location_vec <- unique(salary$Company.Location) |>
  fct_expand("Any") |>
  levels()

type_vec <- unique(salary$Employment.Type) |>
  fct_expand("Any") |>
  levels()

ui <- fluidPage(
  sidebarLayout(
    sidebarPanel(selectInput(inputId = "job_sel", 
                             label = "Select a Job:",
                             choices = job_vec,
                             selected = "Data Scientist"),
                 checkboxGroupInput(inputId = "exp_sel",
                                    label = "Select an Experience Level:",
                                    choices = c("Entry", "Mid", "Senior", "Executive"),
                                    selected = c("Entry", "Mid", "Senior", "Executive")),
                 selectInput(inputId = "location_sel",
                             label = "Select a Location:",
                             choices = location_vec,
                             selected = "United States"),
                 checkboxGroupInput(inputId = "size_sel",
                                    label = "Select a Company Size:",
                                    choices = c("Small", "Medium", "Large"),
                                    selected = c("Small", "Medium", "Large")),
                 sliderInput(inputId = "year_sel",
                             label = "Select Any Year(s):",
                             min = 2020,
                             max = 2024,
                             value = c(2020,2024)),
                 selectInput(inputId = "type_sel",
                             label = "Select an Employment Type:",
                             choices = type_vec,
                             selected = "Any"),
                 sliderInput(inputId = "bin_sel",
                             label = "Select a Number of Histogram Bins:",
                             min = 1,
                             max = 50,
                             value = 15)),
    mainPanel(plotOutput(outputId = "hist_plot"),
              tableOutput(outputId = "data_table"))
  )
)

server <- function(input, output, session) {
  
  ## observeEvent(): first argument is either an input or a reactive data frame
  ## when something in the first argument changes, the code in the { } is triggered to update
  observeEvent(input$tour_sel, {
    
    player_choices = df |> 
      filter(tour == input$tour_sel) |>
      distinct(player) |> 
      pull(player)
    
    updateSelectInput(inputId = "player_sel",
                      choices = player_choices)
  })
  
  job_react = reactive({
    
    if (input$job_sel == "All") {
      job_df = salary
    } else {
      job_df = salary |> filter(Job.Title == input$job_sel)
    }
    
    if (input$location_sel == "Any") {
      job_df = job_df
    } else {
      job_df = job_df |> filter(Company.Location == input$location_sel)
    }
    
    if (input$type_sel == "Any") {
      job_df = job_df
    } else {
      job_df = job_df |> filter(Employment.Type == input$type_sel)
    }
    
    job_df = job_df |> 
      filter(Experience.Level %in% input$exp_sel) |>
      filter(Company.Size %in% input$size_sel) |>
      filter(Year >= input$year_sel[1] & Year <= input$year_sel[2])
    
  })
  
  output$hist_plot = renderPlot({
    ggplot(data = job_react(), aes(x = Salary.in.USD)) +
      geom_histogram(bins = input$bin_sel, col = "lightblue4", fill = "lightblue") +
      labs(title = glue::glue("Histogram of Salary (USD) for ", input$job_sel, " Jobs")) +
      theme_minimal(base_size = 25) +
      labs(x = "Salary (USD)")
  })
  
  output$data_table = renderTable({
    
    job_react() |> group_by(Job.Title) |>
      summarise(mean_salary = mean(Salary.in.USD),
                median_salary = median(Salary.in.USD),
                minimum_salary = min(Salary.in.USD),
                maximum_salary = max(Salary.in.USD),
                sd_salary = sd(Salary.in.USD),
                count = n())
  })
}
shinyApp(ui, server)
```

